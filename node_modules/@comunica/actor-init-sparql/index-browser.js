"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.evaluateQuery = exports.newEngine = exports.bindingsStreamToGraphQl = void 0;
/* eslint-disable unicorn/filename-case */
__exportStar(require("./lib/ActorInitSparql-browser"), exports);
var actor_sparql_serialize_tree_1 = require("@comunica/actor-sparql-serialize-tree");
Object.defineProperty(exports, "bindingsStreamToGraphQl", { enumerable: true, get: function () { return actor_sparql_serialize_tree_1.bindingsStreamToGraphQl; } });
/**
 * Create a new comunica engine from the default config.
 * @return {ActorInitSparql} A comunica engine.
 */
function newEngine() {
    return require('./engine-default.js');
}
exports.newEngine = newEngine;
// TODO: remove in 2.0.0, this is just here for backwards-compatibility
function evaluateQuery(query, context) {
    return newEngine().query(query, context);
}
exports.evaluateQuery = evaluateQuery;
//# sourceMappingURL=index-browser.js.map