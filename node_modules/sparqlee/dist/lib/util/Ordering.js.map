{"version":3,"file":"Ordering.js","sourceRoot":"","sources":["../../../lib/util/Ordering.ts"],"names":[],"mappings":";;;AAEA,sDAAqD;AAErD,iEAAiE;AACjE,SAAgB,UAAU,CAAC,IAA0B,EAAE,IAA0B,EAAE,WAAmB;IAClG,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,IAAI,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,SAAS,EAAE;QAC5E,MAAM,CAAC,GAAG,iCAAgB,CAAC,IAAI,CAAC,CAAC;QACjC,MAAM,CAAC,GAAG,iCAAgB,CAAC,IAAI,CAAC,CAAC;QACjC,OAAO,KAAK,CAAC,CAAC,EAAE,CAAC,EAAE,WAAW,CAAC,CAAC;KACnC;SAAM;QACH,OAAO,CAAC,CAAC;KACZ;AACL,CAAC;AARD,gCAQC;AAED,qBAAqB;AACrB,SAAgB,KAAK,CAAC,MAAsB,EAAE,MAAsB,EAAE,WAAmB;IACrF,IAAI,MAAM,CAAC,UAAU,KAAK,MAAM,CAAC,UAAU,EAAE;QACzC,OAAO,CAAC,CAAC;KACZ;IACD,OAAO,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1E,CAAC;AALD,sBAKC","sourcesContent":["import * as RDF from 'rdf-js';\nimport * as T from '../expressions/Term';\nimport { transformLiteral } from '../Transformation';\n\n// Determine the relative numerical order of the two given terms.\nexport function orderTypes(litA: RDF.Term | undefined, litB: RDF.Term | undefined, isAscending:boolean){\n    if (litA && litA.termType === 'Literal' && litB && litB.termType === 'Literal') {\n        const a = transformLiteral(litA);\n        const b = transformLiteral(litB);\n        return order(a, b, isAscending);\n    } else {\n        return 0;\n    }\n}\n\n// Effective ordering\nexport function order(orderA: T.Literal<any>, orderB: T.Literal<any>, isAscending:boolean){\n    if (orderA.typedValue === orderB.typedValue) {\n        return 0;\n    }\n    return orderA.typedValue > orderB.typedValue === isAscending ? 1 : -1;\n}\n"]}