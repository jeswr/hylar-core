{"version":3,"file":"NamedFunctions.js","sourceRoot":"","sources":["../../../lib/functions/NamedFunctions.ts"],"names":[],"mappings":"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","sourcesContent":["import { Map } from 'immutable';\n\nimport * as E from '../expressions';\nimport * as C from '../util/Consts';\nimport * as Err from '../util/Errors';\n\nimport { TypeURL } from '../util/Consts';\nimport {\n  parseXSDDecimal,\n  parseXSDFloat,\n  parseXSDInteger,\n} from '../util/Parsing';\n\nimport { OverloadMap } from './Core';\nimport { bool, dateTime, declare, number, string } from './Helpers';\n\ntype Term = E.TermExpression;\n\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// Begin definitions.\n\n// ----------------------------------------------------------------------------\n// XPath Constructor functions\n// https://www.w3.org/TR/sparql11-query/#\n// https://www.w3.org/TR/xpath-functions/#casting-from-primitive-to-primitive\n// ----------------------------------------------------------------------------\n\nconst toString = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1((val: E.NumericLiteral) => string(number(val.typedValue).str()))\n    .onBoolean1Typed((val) => string(bool(val).str()))\n    .onTerm1((val: E.StringLiteral) => string(val.str()))\n    .collect(),\n};\n\nconst toFloat = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1((val: E.NumericLiteral) => number(val.typedValue))\n    .onBoolean1Typed((val) => number(val ? 1 : 0))\n    .onUnary('string', (val: E.StringLiteral) => {\n      const result = parseXSDFloat(val.str());\n      if (result === undefined) { throw new Err.CastError(val, TypeURL.XSD_FLOAT); }\n      return number(result);\n    })\n    .copy({ from: ['string'], to: ['nonlexical'] })\n    .collect(),\n};\n\nconst toDouble = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1((val: E.NumericLiteral) => number(val.typedValue, TypeURL.XSD_DOUBLE))\n    .onBoolean1Typed((val) => number(val ? 1 : 0, TypeURL.XSD_DOUBLE))\n    .onUnary('string', (val: E.Term) => {\n      const result = parseXSDFloat(val.str());\n      if (result === undefined) { throw new Err.CastError(val, TypeURL.XSD_DOUBLE); }\n      return number(result, TypeURL.XSD_DOUBLE);\n    })\n    .copy({ from: ['string'], to: ['nonlexical'] })\n    .collect(),\n};\n\nconst toDecimal = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1((val: E.Term) => {\n      const result = parseXSDDecimal(val.str());\n      if (result === undefined) { throw new Err.CastError(val, TypeURL.XSD_DECIMAL); }\n      return number(result, TypeURL.XSD_DECIMAL);\n    })\n    .onString1((val: E.Term) => {\n      const str = val.str();\n      const result = /^(\\-|\\+)?([0-9]+(\\.[0-9]+)?)$/.test(str) ? parseXSDDecimal(str) : undefined;\n      if (result === undefined) { throw new Err.CastError(val, TypeURL.XSD_DECIMAL); }\n      return number(result, TypeURL.XSD_DECIMAL);\n    })\n    .copy({ from: ['string'], to: ['nonlexical'] })\n    .onBoolean1Typed((val) => number(val ? 1 : 0, TypeURL.XSD_DECIMAL))\n    .collect(),\n};\n\nconst toInteger = {\n  arity: 1,\n  overloads: declare()\n    .onBoolean1Typed((val) => number(val ? 1 : 0, TypeURL.XSD_INTEGER))\n    .onNumeric1((val: E.Term) => {\n      const result = parseXSDInteger(val.str());\n      if (result === undefined) { throw new Err.CastError(val, TypeURL.XSD_INTEGER); }\n      return number(result, TypeURL.XSD_INTEGER);\n    })\n    .onString1((val: E.Term) => {\n      const str = val.str();\n      const result = /^[0-9]+$/.test(str) ? parseXSDInteger(str) : undefined;\n      if (result === undefined) { throw new Err.CastError(val, TypeURL.XSD_INTEGER); }\n      return number(result, TypeURL.XSD_INTEGER);\n    })\n    .copy({ from: ['integer'], to: ['nonlexical'] })\n    .collect(),\n};\n\nconst toDatetime = {\n  arity: 1,\n  overloads: declare()\n    .onUnary('date', (val: E.DateTimeLiteral) => val)\n    .onUnary('string', (val: Term) => {\n      const date = new Date(val.str());\n      if (isNaN(date.getTime())) {\n        throw new Err.CastError(val, TypeURL.XSD_DATE_TIME);\n      }\n      return dateTime(date, val.str());\n    })\n    .copy({ from: ['string'], to: ['nonlexical'] })\n    .collect(),\n};\n\nconst toBoolean = {\n  arity: 1,\n  overloads: declare()\n    .onNumeric1((val: E.NumericLiteral) => bool(val.coerceEBV()))\n    .onUnary('boolean', (val: Term) => bool(val.coerceEBV()))\n    .onUnary('string', (val: Term) => {\n      switch (val.str()) {\n        case 'true':\n          return bool(true);\n        case 'false':\n          return bool(false);\n        case '1':\n          return bool(true);\n        case '0':\n          return bool(false);\n        default:\n          throw new Err.CastError(val, TypeURL.XSD_BOOLEAN);\n      }\n    })\n    .copy({ from: ['string'], to: ['nonlexical'] })\n    .collect(),\n};\n\n// End definitions.\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n// ----------------------------------------------------------------------------\n\nconst _definitions: { [key in C.NamedOperator]: Definition } = {\n  // --------------------------------------------------------------------------\n  // XPath Constructor functions\n  // https://www.w3.org/TR/sparql11-query/#FunctionMapping\n  // --------------------------------------------------------------------------\n  [TypeURL.XSD_STRING]: toString,\n  [TypeURL.XSD_FLOAT]: toFloat,\n  [TypeURL.XSD_DOUBLE]: toDouble,\n  [TypeURL.XSD_DECIMAL]: toDecimal,\n  [TypeURL.XSD_INTEGER]: toInteger,\n  [TypeURL.XSD_DATE_TIME]: toDatetime,\n  [TypeURL.XSD_DATE]: toDatetime,\n  [TypeURL.XSD_BOOLEAN]: toBoolean,\n};\n\n// ----------------------------------------------------------------------------\n// The definitions and functionality for all operators\n// ----------------------------------------------------------------------------\n\nexport interface Definition {\n  arity: number | number[];\n  overloads: OverloadMap;\n}\n\nexport const namedDefinitions = Map<C.NamedOperator, Definition>(_definitions);\n"]}